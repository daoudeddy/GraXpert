name: build-release

env:
  ai_s3_endpoint: ${{ secrets.AI_S3_ENDPOINT }}
  ai_s3_access_key: ${{ secrets.AI_S3_ACCESS_KEY }}
  ai_s3_secret_key: ${{ secrets.AI_S3_SECRET_KEY }}
  ai_s3_bucket_name: ${{ secrets.AI_S3_BUCKET_NAME }}
  ai_s3_bge_bucket_name: ${{ secrets.AI_S3_BGE_BUCKET_NAME }}
  ai_s3_denoise_bucket_name: ${{ secrets.AI_S3_DENOISE_BUCKET_NAME }}
  ai_s3_deconvolution_object_bucket_name: ${{ secrets.AI_S3_DECONVOLUTION_OBJECT_BUCKET_NAME }}
  ai_s3_deconvolution_stars_bucket_name: ${{ secrets.AI_S3_DECONVOLUTION_STARS_BUCKET_NAME }}

on:
  push:
    tags:
      - "*.*.*"

jobs:

  # build-linux-deb:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: setup python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'
  #     - name: checkout repository
  #       uses: actions/checkout@v3
  #     - name: configure ai s3 secrets
  #       run: |
  #         echo "endpoint = \"$ai_s3_endpoint\"" >> ./graxpert/s3_secrets.py && \
  #         echo "ro_access_key = \"$ai_s3_access_key\"" >> ./graxpert/s3_secrets.py && \
  #         echo "ro_secret_key = \"$ai_s3_secret_key\"" >> ./graxpert/s3_secrets.py && \
  #         echo "bucket_name = \"$ai_s3_bucket_name\"" >> ./graxpert/s3_secrets.py && \
  #         echo "bge_bucket_name = \"$ai_s3_bge_bucket_name\"" >> ./graxpert/s3_secrets.py && \
  #         echo "denoise_bucket_name = \"$ai_s3_denoise_bucket_name\"" >> ./graxpert/s3_secrets.py
  #     - name: install dependencies
  #       run: |
  #         sudo apt install alien -y && \
  #         pip install "cx_freeze" && \
  #         pip install onnxruntime-gpu && \
  #         pip install -r requirements.txt
  #     - name: patch version
  #       run: |
  #         chmod u+x ./releng/patch_version.sh && \
  #         ./releng/patch_version.sh
  #     - name: create GraXpert-linux bundle
  #       run: python ./setup.py bdist_deb
  #     - name: store artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: graxpert_${{github.ref_name}}-1_amd64.deb
  #         path: ./dist/graxpert_${{github.ref_name}}-1_amd64.deb
  #         retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: checkout repository
        uses: actions/checkout@v3
      - name: configure ai s3 secrets
        run: |
          $PSDefaultParameterValues['Out-File:Encoding']='UTF8' ; `
          "endpoint = `"$env:ai_s3_endpoint`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "ro_access_key = `"$env:ai_s3_access_key`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "ro_secret_key = `"$env:ai_s3_secret_key`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "bucket_name = `"$env:ai_s3_bucket_name`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "bge_bucket_name = `"$env:ai_s3_bge_bucket_name`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "denoise_bucket_name = `"$env:ai_s3_denoise_bucket_name`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "deconvolution_object_bucket_name = `"$env:ai_s3_deconvolution_object_bucket_name`"" | Out-File -Append .\graxpert\s3_secrets.py ; `
          "deconvolution_stars_bucket_name = `"$env:ai_s3_deconvolution_stars_bucket_name`"" | Out-File -Append .\graxpert\s3_secrets.py
      - name: install dependencies
        run: |
          pip install setuptools wheel cx_freeze==7.2.3; `
          pip install onnxruntime-directml; `
          pip install -r requirements.txt
      - name: patch version
        run: ./releng/patch_version.ps1
      - name: create GraXpert-win64 bundle
        run: python ./setup.py bdist_msi
      - name: store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: GraXpert-${{github.ref_name}}-win64.msi
          path: ./dist/GraXpert-${{github.ref_name}}-win64.msi
          retention-days: 5

  release:
    runs-on: ubuntu-latest
    # needs: [build-linux-deb, build-linux-zip, build-windows, build-macos-x86_64]
    needs: [build-windows]
    steps:
      # - name: download linux deb
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: graxpert_${{github.ref_name}}-1_amd64.deb
      - name: download windows exe
        uses: actions/download-artifact@v4
        with:
          name: GraXpert-${{github.ref_name}}-win64.msi
      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            GraXpert-${{github.ref_name}}-win64.msi
      #     graxpert_${{github.ref_name}}-1_amd64.deb

